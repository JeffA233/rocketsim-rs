# read RocketSim/src/RLConst.h and generate src/consts.rs

def ensure_rust_float(val):
    try:
        if str(int(val)) == val:
            val += "."
    except ValueError:
        pass

    return val

def vec3_to_str(vals):
    return f"Vec3::new({', '.join(vals)})"

lines = []

with open("RocketSim/src/RLConst.h") as file:
    lines = file.readlines()

consts = {}

current_section = []
open_braces = 0
const_type = None

for i, line in enumerate(lines):
    line = line.strip()

    if line == "" or line.startswith("#") or line.startswith("//"):
        continue

    if line.startswith("namespace"):
        current_section.append(line.split()[1])
        consts[" ".join(current_section)] = {}
        open_braces += 1
        continue

    if "{" in line:
        open_braces += 1

    if "}" in line:
        open_braces -= 1

        if open_braces == 0:
            current_section.pop()
            continue
        elif open_braces == 1 and len(current_section) == 2:
            current_section.pop()
            continue

    namespace = " ".join(current_section)

    if line.startswith("constexpr"):
        const_type = line.split(" ")[1]
        consts[namespace][const_type] = []

    if line.startswith("const static"):
        parts = line.split(" ")
        const_type = parts[2]
        name = None

        if len(parts) > 3 and parts[3] != "//":
            name = parts[3]
        else:
            next_line = lines[i + 1]
            pred_name = next_line.split(" = ")[0].strip()

            if "[" in pred_name:
                name = pred_name

        if name is not None and "[" in name:
            array_len = name.split("[")[1].removesuffix("]")
            const_type = f"[{const_type}; {array_len} as usize]"

        if consts[namespace].get(const_type) is None:
            consts[namespace][const_type] = []

        if name is not None:
            consts[namespace][const_type].append([name.split("[")[0].split()[-1], []])

    items = line.split(" = ")
    if len(items) == 1:
        if items[0][0] != "{":
            continue

        array = items[0][1::].split("}")[0].strip()
        if len(array) < 2:
            continue

        items = [
            ensure_rust_float(item.strip().replace("f", "").replace("M_", ""))
            for item in array.split(",")
        ]

        consts[namespace][const_type][-1][1].append(items)
        continue

    if "[" in items[0]:
        continue

    comment = items[1].split(" //")
    if len(comment) == 2:
        items[1] = comment[0]
        items.append(comment[1].strip())

    if items[1].endswith(",") or items[1].endswith(";"):
        items[1] = items[1][:-1]

    items[1] = items[1].replace("f", "")

    if const_type == "float":
        if items[1] == "M_SQRT1_2":
            items[1] = "FRAC_1_SQRT_2"

        if items[1].startswith("(") and items[1].endswith(")"):
            items[1] = items[1].removeprefix("(").removesuffix(")")

        vals = items[1].split()
        for i, valz in enumerate(vals):
            if valz == "/":
                continue

            vals[i] = ensure_rust_float(valz)

        items[1] = " ".join(vals)
    elif const_type == "Vec":
        vals = items[1].removeprefix("Vec(").removesuffix(")").split(", ")

        for i, valz in enumerate(vals):
            if valz == "/":
                continue

            vals[i] = ensure_rust_float(valz)

        items[1] = vec3_to_str(vals)
    elif const_type == "LinearPieceCurve":
        continue

    consts[namespace][const_type].append(items)

consts_rs = [
    "// This file was generated by generate_consts.py",
    "",
    "use crate::math::Vec3;",
    "use std::f32::consts::{FRAC_1_SQRT_2, PI};",
    "",
]

type_convert = {
    "float": "f32",
    "int": "i32",
    "Vec": "Vec3",
    # "CarSpawnPos": "CarSpawnPos",
}

for namespace, types in consts.items():
    namespace = namespace.removeprefix("RLConst").strip().lower()

    if namespace == "":
        namespace = None
        indent = ""
    else:
        consts_rs.append(f"\npub mod {namespace} {{")
        indent = "    "

        if namespace == "boostpads":
            consts_rs.append(f"{indent}use crate::math::Vec3;")
            consts_rs.append("")


    for raw_item_type, vars in types.items():
        if "[" in raw_item_type:
            item_type = raw_item_type
            old_type = raw_item_type.split(";")[0][1::]
            real_type = type_convert.get(old_type)

            if real_type is None:
                print(f"Couldn't find Rust type for {raw_item_type} ({vars})")
                continue

            item_type = item_type.replace(old_type, real_type)
        else:
            item_type = type_convert.get(raw_item_type)
            real_type = "" # anything other than None

        if item_type is None or real_type is None:
            print(f"Couldn't find Rust type for {raw_item_type} ({vars})")
            continue

        for var in vars:
            name = var[0]
            val = var[1]
            comment = var[2] if len(var) == 3 else None

            if real_type == "Vec3":
                vals = f",\n".join([f"    {indent}" + vec3_to_str(vals) for vals in val])
                val = f"[\n{vals},\n{indent}]"

            if comment is not None:
                consts_rs.append(f"{indent}/// {comment}")
            consts_rs.append(f"{indent}pub const {name}: {item_type} = {val};")

    if namespace is not None:
        consts_rs.append("}")

consts_rs.append("")

with open("src/consts.rs", "w") as file:
    file.write("\n".join(consts_rs))

# import subprocess
# subprocess.run(["cargo", "fmt"])
